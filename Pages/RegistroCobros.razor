@page "/cobro"

@using Miguel_P2_AP2.BLL
@using Miguel_P2_AP2.Models
@using Miguel_P2_AP2.DAL

@inject IToastService toast

<EditForm Model="cobros" OnInvalidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <h3>Registro de Cobros</h3>
            <h6>Disculpe profe, hay que darle click a la tabla para actualizarla luego de seleccionar un cliente (para que le salgan las facturas)</h6>
        </div>
    </div>
    <div class="card-body">
        <form>
            @*ID*@
            <div class="form-group">
                <label>Id:</label>
                <div class="input-group">
                    <InputNumber class="form-control col-4" @bind-Value="cobros.CobroId"></InputNumber>
                    <ValidationMessage For="@(() => cobros.CobroId )"></ValidationMessage>
                    <button type="button" class="btn btn-primary input-group-append" @onclick="Buscar">Buscar</button>
                </div>
            </div>


            <div class="form-group">
                @*Cliente Id*@
                <div class="form-group">
                    <label>Cliente ID</label>
                    <select @bind="cobros.ClienteId" class="form-control" @onblur="ObtenerVentasPendientes">
                        <option value="0" disabled selected>Seleccione un cliente</option>

                        @foreach (var item in ClienteList)
                        {
                            <option value="@item.ClienteId">@item.Nombres</option>
                        }
                    </select>
                </div>


                @*Fecha*@
                <div class="form-group col-10">
                    <label>Fecha</label>
                    <InputDate class="form-group" @bind-Value="cobros.Fecha"></InputDate>
                    <ValidationMessage For="(() => cobros.Fecha)"></ValidationMessage>
                </div>
            </div>

            <div class="table-responsive text-nowrap">
                <label>Facturas Pendientes</label>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Fecha</th>
                            <th>Monto</th>
                            <th>Balance</th>
                            <th>Cobrado</th>
                            <th>Pagar</th>

                        </tr>
                    </thead>
                    <tbody style="background-color: white;">
                        @foreach (var item in cobros.CobrosDetalle)
                        {
                            <tr>
                                <td>@item.VentaId</td>
                                <td>@item.Venta.Fecha.ToString("dd/MM/yyyy")</td>
                                <td>@item.Venta.Monto.ToString("N2")</td>
                                <td>@item.Venta.Balance.ToString("N2")</td>
                                <td>@item.Cobrado.ToString("N2")</td>
                                <td> <input type="checkbox" @onchange="@(() => Cobrar(item))" /> </td>
                            </tr>
                        }
                    </tbody>


                </table>
                <div class=" form-group form-inline">
                    <div class="form-group col-6">
                        <label>Totales</label>
                        <span class="form-control">@cobros.CobrosDetalle.Count()</span>
                    </div>

                    <div class="form-group col-6">
                        <label>Total cobrado</label>
                        <InputNumber @bind-Value="cobros.TotalCobrado" class="form-control" readOnly="true" />
                        <ValidationMessage For="@(() => cobros.TotalCobrado)" />
                    </div>
                </div>

                <div class="form-group ">
                    <label>Observaciones</label>
                    <textarea @bind="cobros.Observaciones" class="form-control" row="5" placeholder="Observaciones" />
                </div>
            </div>
        </form>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>




</EditForm>




@code {

    Cobros cobros = new Cobros();
    Clientes cliente = new Clientes();
    Ventas ventas = new Ventas();

    List<Clientes> ClienteList = new List<Clientes>();
    List<CobrosDetalle> VentaList = new List<CobrosDetalle>();

    protected override void OnInitialized()
    {
        Nuevo();
    }

    private async void Nuevo()
    {
        cobros = new Cobros();
        await VentasBLL.GetVentasPendiente(cliente.ClienteId);
        ClienteList = ClientesBLL.GetList(c => true);
        VentaList = new List<CobrosDetalle>();
        cobros.Fecha = DateTime.Now;
    }

    private void Guardar()
    {
        bool guardado;

        cobros.CobrosDetalle.RemoveAll(d => d.Cobrado == 0);

        guardado = CobrosBLL.Guardar(cobros);

        if (guardado)
        {
            toast.ShowSuccess("Guardado correctamente");
            Nuevo();
        }
        else
            toast.ShowError("No se pudo guardar correctamente");

    }

    private async Task Buscar()
    {
        var Cobro = CobrosBLL.Buscar(cobros.CobroId);

        Cobro.CobrosDetalle = await VentasBLL.GetVentasCobradas(Cobro.ClienteId);

        if (Cobro != null)
            this.cobros = Cobro;
        else
            toast.ShowError("El cobro no existe");
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = CobrosBLL.Eliminar(cobros.CobroId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private void Cobrar(CobrosDetalle cobroDetalle)
    {
        if (cobroDetalle.Cobrado == 0)
        {
            cobroDetalle.Cobrado = cobroDetalle.Venta.Balance;
            cobros.TotalCobrado += cobroDetalle.Cobrado;
        }
        else
        {
            cobroDetalle.Cobrado = 0;
            cobros.TotalCobrado -= cobroDetalle.Venta.Balance;
        }
    }

    private async Task ObtenerVentasPendientes()
    {
        if (cobros.CobroId == 0)
            cobros.CobrosDetalle = await VentasBLL.GetVentasPendiente(cobros.ClienteId);
    }

}